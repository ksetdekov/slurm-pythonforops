import psycopg2

from utils import Credentials


#
# В Trello, в рабочем пространстве создаём новую доску и колонку. В ней необходимо для каждого ресурса,
# где было принято решение его усилить или отказаться, зарегистрировать карточку.
#
# В качестве имени используйте следующие строки в зависимости от контекста:
#
# Отказаться от использования ресурса <ID ресурса> по измерению <Измерение>
#
# Увеличить квоты ресурса <ID ресурса> по измерению <Измерение>
#
# В качестве описания приведите тип использования ресурса и интенсивность использования ресурса в свободном формате.
#
# В качестве label укажите в карточке имя команды.
#
# В качестве дедлайна (due) дату последнего снятия метрик по ресурсу + 14 календарных дней
#
# todo Если карточка с ресурсом и измерением ресурса уже была создана - повторно создавать не нужно, это должно обрабатываться в коде автоматически.
#
# todo Далее в этой же программе необходимо создать ещё один обработчик ввода.
#
# todo Он должен запускать процесс генерации метрик при помощи SSH и paramiko .
#
# todo Затем, при помощи psycopg2 извлечь эти данные из базы данных, рассчитать  тип и интенсивность нагрузки,
# todo а также вывод о продолжении эксплуатации ресурса по уже созданным в предыдущем модуле алгоритмам и создать карточки
# в Trello при помощи кода из предыдущих уроков.
#
# В итоге ваша программа должна:
#
# todo Получать данные по HTTP и из базы данных (как разделить и выбрать способ ввода, остаётся на ваше усмотрение)
# todo Анализировать метрики на предмет обнаружения нуждающихся в удалении или расширении ресурсов
# todo Создавать соответствующие карточки в Trello

def read_all_tables_from_db(credential):
    """
    Схема данных в таблице представлена полями:
    team - Название команды,
    resource - ID ресурса,
    dimension - Измерение ресурса (CPU, RAM или NetFlow)
    collect_date - Дата и время сбора статистики
    usage - Загрузка ресурса в процентах (от 0 до 100)
    """
    # print(credential.postgres_cred)

    with psycopg2.connect(**credential.postgres_cred) as connection_to_db:
        with connection_to_db.cursor() as cursor:
            cursor.execute(R"""
                        Select * from usage_stats.resources
                        """)
            records = cursor.fetchall()
            print(records)
            connection_to_db.commit()


def main():
    credentials = Credentials()
    # print(credentials)
    read_all_tables_from_db(credential=credentials)


if __name__ == '__main__':
    main()
